@model AgricolaDH_GApp.ViewModels.SubirFacturaVM

<div class="text-center">

    <div class="row top-row-spacer">
        <div class="col-md-8">
            <h4 class="page-title">Ingresar</h4>
        </div>
        <div class="col-md-2">
            <button id="volverAIndex" class="btn btn-block btn-secondary">
                Regresar
            </button>
        </div>
        <div class="col-md-2">
            <button id="realizarIngresoConfirm" class="btn btn-block secondary-background-color" style="color: white">
                <i class="nav-icon fas fa-arrow-right"></i> Recibir
            </button>
        </div>
    </div>

    <div class="card card-margin">
        <!-- Order and Date Section -->
        <div class="row card-row-spacer">
            <div class="col-md-8">
                <label style="font-weight: normal; text-align: left; float: left">Orden de compra</label>
                <input id="orderNumber" class="form-control" value="@Model.ordenDeCompra.IdOrdenDeCompra" readonly />
            </div>
            <div class="col-md-4">
                <label style="font-weight: normal; text-align: left; float: left">Fecha</label>
                <input type="date" class="form-control" value="@Model.ordenDeCompra.FechaOrdenDeCompra?.ToString("yyyy-MM-dd")" readonly />
            </div>
        </div>

        <!-- Dynamic Product Section -->
        <div class="row card-row-spacer">
            <label style="font-weight: normal; text-align: left; float: left; margin-right: 10px;">Productos a Ordenar</label>
        </div>

        <div id="productContainer">
            @if (Model.productosOrdenar != null && Model.productosOrdenar.Any())
            {
                @foreach (var product in Model.productosOrdenar)
                {
                    <div class="row card-row-spacer product-row">
                        <div class="col-md-4">
                            <label style="font-weight: normal; text-align: left; float: left">Producto</label>
                            <input class="form-control" value="@product.Producto" readonly />
                            <input type="hidden" class="product-id" value="@product.IdProductoOrdenar" />
                            <input type="hidden" class="product-barcode" data-barcode-value="" />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Cantidad Esperada</label>
                            <input type="number" class="form-control cantidad-esperada" value="@product.Cantidad" readonly />
                        </div>
                        <div class="col-md-1">
                            <label style="font-weight: normal; text-align: left; float: left">Restante</label>
                            <input type="number"
                                   class="form-control cantidad-restante"
                                   value="@product.PorRecibir"
                                   readonly
                                   data-restante-inicial="@product.PorRecibir" />
                        </div>
                        <div class="col-md-1">
                            <label style="font-weight: normal; text-align: left; float: left">Recibir</label>
                            <input type="number"
                                   class="form-control cantidad-recibida"
                                   min="0"
                                   oninput="updateRestante(this)"
                                   onchange="updateRestante(this)" />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Unidad</label>
                            <input type="number" class="form-control" value="@product.Unidad" readonly />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Total</label>
                            <input type="number" class="form-control" value="@product.Total" readonly />
                        </div>
                    </div>
                }
                <div style="height: 30px;"></div>
            }
        </div>
    </div>
</div>

<script type="module">
    // ---- Short serial (12-char Crockford Base32 from SHA-256) ----
    const CROCKFORD = "0123456789ABCDEFGHJKMNPQRSTVWXYZ"; // no I/L/O/U
    function bytesToBase32(bytes, outLen) {
        let bits = 0, value = 0, out = "";
        for (let i = 0; i < bytes.length && out.length < outLen; i++) {
            value = (value << 8) | bytes[i];
            bits += 8;
            while (bits >= 5 && out.length < outLen) {
                out += CROCKFORD[(value >>> (bits - 5)) & 31];
                bits -= 5;
            }
        }
        if (out.length < outLen && bits > 0) {
            out += CROCKFORD[(value << (5 - bits)) & 31];
        }
        return out.padEnd(outLen, "0");
    }

    async function shortSerialFrom(pn, order, idx, length = 12) {
        const source = `${pn}|${order}|${idx}`;
        const data = new TextEncoder().encode(source);
        const hash = await crypto.subtle.digest("SHA-256", data);
        return bytesToBase32(new Uint8Array(hash), length);
    }

    // --------------------------------------------------------------

    function updateRestante(input) {
        const $row = $(input).closest(".product-row");
        const restanteBase = parseInt($row.find(".cantidad-restante").data("restante-inicial"), 10) || 0;
        let recibida = parseInt($(input).val(), 10) || 0;
        if (recibida < 0) recibida = 0;
        if (recibida > restanteBase) recibida = restanteBase;
        $(input).val(recibida);
        $row.find(".cantidad-restante").val(restanteBase - recibida);
    }
    window.updateRestante = updateRestante;

    //  restauramos tu script original de impresión
    import { openPrintWindow } from "/js/labelPrinter.js";

    $(document).ready(function () {
        $("#volverAIndex").click(function () {
            $.ajax({
                url: '@Url.Action("Index", "Ingresos")',
                type: 'GET',
                success: function (data) { $("#HtmlBody").html(data); },
                error: function () { alert("Error al regresar al listado de órdenes."); }
            });
        });

        $(document).on('input', '.cantidad-recibida', function () {
            updateRestante(this);
        });

        $(".product-row").each(function () {
            const $row = $(this);
            const productName = $row.find("input[readonly]").first().val();
            if (!productName) return;
            $.ajax({
                url: '/Ingresos/GetProductBarcodeID',
                type: 'GET',
                data: { nombreProducto: productName },
                success: function (response) {
                    if (response.success) {
                        $row.find(".product-barcode").data("barcode-value", response.barcodeID);
                    } else {
                        console.error(`Error: ${response.message}`);
                    }
                },
                error: function () { console.error("Error fetching product barcode."); }
            });
        });

        $("#realizarIngresoConfirm").off("click").on("click", async function () {
            const receivedProducts = [];
            const labelsToPrint = [];
            const rows = $(".product-row").toArray();
            const workOrderNumber = $("#orderNumber").val();

            for (const el of rows) {
                const $row = $(el);
                const productId = $row.find(".product-id").val();
                const productName = $row.find("input[readonly]").first().val();
                const partNumber = $row.find(".product-barcode").data("barcode-value");
                const recibida = parseInt($row.find(".cantidad-recibida").val(), 10) || 0;
                const esperada = parseInt($row.find(".cantidad-esperada").val(), 10) || 0;
                const restanteBase = parseInt($row.find(".cantidad-restante").data("restante-inicial"), 10) || 0;

                if (!productName || !partNumber) continue;
                if (restanteBase === 0) continue;
                if (recibida <= 0) continue;
                if (recibida > restanteBase) {
                    alert(`No puedes recibir más de lo que queda en Restante para: ${productName}`);
                    return;
                }

                const newRestante = restanteBase - recibida;
                const yaRecibido = esperada - restanteBase;

                const shortSerials = [];
                for (let i = 1; i <= recibida; i++) {
                    const unitIndex = yaRecibido + i;
                    const shortSerial = (await shortSerialFrom(partNumber, workOrderNumber, unitIndex)).toUpperCase();
                    shortSerials.push(shortSerial);

                    // usamos tu formato original
                    labelsToPrint.push(`
                            <div class="label">
                                <h4>Orden: ${workOrderNumber}</h4>
                                <h4>Producto: ${productName}</h4>
                                <h4>Serial: ${shortSerial}</h4>
                                <svg class="barcode" data-barcode-value="${shortSerial}"></svg>
                            </div>
                        `);
                }

                $row.find(".cantidad-restante").val(newRestante).data("restante-inicial", newRestante);

                receivedProducts.push({
                    IdProductoOrdenar: productId,
                    Recibida: recibida,
                    PorRecibir: newRestante,
                    SerialesCortos: shortSerials
                });
            }

            if (receivedProducts.length === 0) {
                alert("No se han ingresado productos válidos.");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/Ingresos/ActualizarPorRecibir",
                data: JSON.stringify(receivedProducts),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        alert("Ingreso registrado correctamente.");
                        if (labelsToPrint.length > 0) {
                            //  Aquí vuelve tu impresión nativa
                            openPrintWindow(labelsToPrint.join(''), workOrderNumber);
                        }
                    } else {
                        alert("Hubo un error al actualizar los datos.");
                    }
                },
                error: function () {
                    alert("Error al enviar la solicitud.");
                }
            });
        });
    });
</script>
