@model AgricolaDH_GApp.ViewModels.SubirFacturaVM

<div class="text-center">

    <div class="row top-row-spacer">
        <div class="col-md-8">
            <h4 class="page-title">Ingresar</h4>
        </div>
        <div class="col-md-2">
            <button id="volverAIndex" class="btn btn-block btn-secondary">
                Regresar
            </button>
        </div>
        <div class="col-md-2">
            <button id="realizarIngresoConfirm" class="btn btn-block secondary-background-color" style="color: white">
                <i class="nav-icon fas fa-arrow-right"></i> Recibir
            </button>
        </div>
    </div>

    <div class="card card-margin">
        <!-- Order and Date Section -->
        <div class="row card-row-spacer">
            <div class="col-md-8">
                <label style="font-weight: normal; text-align: left; float: left">Orden de compra</label>
                <input id="orderNumber" class="form-control" value="@Model.ordenDeCompra.IdOrdenDeCompra" readonly />
            </div>
            <div class="col-md-4">
                <label style="font-weight: normal; text-align: left; float: left">Fecha</label>
                <input type="date" class="form-control" value="@Model.ordenDeCompra.FechaOrdenDeCompra?.ToString("yyyy-MM-dd")" readonly />
            </div>
        </div>

        <!-- Dynamic Product Section -->
        <div class="row card-row-spacer">
            <label style="font-weight: normal; text-align: left; float: left; margin-right: 10px;">Productos a Ordenar</label>
        </div>

        <div id="productContainer">
            @if (Model.productosOrdenar != null && Model.productosOrdenar.Any())
            {
                @foreach (var product in Model.productosOrdenar)
                {
                    <div class="row card-row-spacer product-row">
                        <div class="col-md-4">
                            <label style="font-weight: normal; text-align: left; float: left">Producto</label>
                            <input class="form-control" value="@product.Producto" readonly />
                            <input type="hidden" class="product-id" value="@product.IdProductoOrdenar" />
                            <input type="hidden" class="product-barcode" data-barcode-value="" />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Cantidad Esperada</label>
                            <input type="number" class="form-control" value="@product.Cantidad" readonly />
                        </div>
                        <div class="col-md-1">
                            <label style="font-weight: normal; text-align: left; float: left">Restante</label>
                            <input type="number" class="form-control cantidad-restante" value="@product.PorRecibir" readonly />
                        </div>
                        <div class="col-md-1">
                            <label style="font-weight: normal; text-align: left; float: left">Recibir</label>
                            <input type="number" class="form-control cantidad-recibida" min="0" />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Unidad</label>
                            <input type="number" class="form-control" value="@product.Unidad" readonly />
                        </div>
                        <div class="col-md-2">
                            <label style="font-weight: normal; text-align: left; float: left">Total</label>
                            <input type="number" class="form-control" value="@product.Total" readonly />
                        </div>
                    </div>
                }
                <div style="height: 30px;"></div>

            }
        </div>      
    </div>
</div>

<script type="module">

    function updateRestante(input) {
        const $row = $(input).closest(".product-row");
        const cantidadEsperada = parseInt($row.find(".cantidad-restante").val(), 10) || 0;
        const cantidadRecibida = parseInt($row.find(".cantidad-recibida").val(), 10) || 0;

        let newRestante = Math.max(cantidadEsperada - cantidadRecibida, 0);
        $row.find(".cantidad-restante").val(newRestante);
    }
    window.updateRestante = updateRestante;

    import { openPrintWindow, triggerLabelPrinting } from "/js/labelPrinter.js";
    window.triggerLabelPrinting = triggerLabelPrinting;

    $(document).ready(function () {

        $("#volverAIndex").click(function () {
            $.ajax({
                url: '@Url.Action("Index", "Ingresos")',
                type: 'GET',
                success: function (data) {
                    $("#HtmlBody").html(data);
                },
                error: function () {
                    alert("Error al regresar al listado de órdenes.");
                }
            });
        });

        // Fetch barcodes for all products on page load
        $(".product-row").each(function () {
            const $row = $(this);
            const productName = $row.find("input[readonly]").val();

            if (productName) {
                $.ajax({
                    url: '/Ingresos/GetProductBarcodeID',
                    type: 'GET',
                    data: { nombreProducto: productName },
                    success: function (response) {
                        if (response.success) {
                            $row.find(".product-barcode").data("barcode-value", response.barcodeID);
                        } else {
                            console.error(`Error: ${response.message}`);
                        }
                    },
                    error: function () {
                        console.error("Error fetching product barcode.");
                    }
                });
            }
        });

        $("#realizarIngresoConfirm").click(function () {
            let receivedProducts = [];
            let labelsToPrint = [];

            $(".product-row").each(function () {
                const $row = $(this);
                let productId = $row.find(".product-id").val();
                let productName = $row.find("input[readonly]").val();
                let productBarcodeID = $row.find(".product-barcode").data("barcode-value");
                let workOrderNumber = $("#orderNumber").val();
                let recibida = parseInt($row.find(".cantidad-recibida").val()) || 0;
                let restante = parseInt($row.find(".cantidad-restante").val()) || 0;

                if (restante === 0) {
                    console.warn(`No more stock for ${productName}. Skipping label printing.`);
                    return;
                }

                if (recibida > restante) {
                    alert(`No puedes recibir más de lo que queda en Restante para: ${productName}`);
                    return;
                }

                if (recibida > 0) {
                    let newRestante = Math.max(restante - recibida, 0);
                    $row.find(".cantidad-restante").val(newRestante);

                    let cantidadEsperada = parseInt($row.find("input[readonly]").eq(1).val()) || 0;
                    let yaRecibido = cantidadEsperada - restante;

                    let serials = [];

                    for (let i = 1; i <= recibida; i++) {
                        let serialIndex = yaRecibido + i;
                        let serialNumber = `${productBarcodeID}-${workOrderNumber}-${String(serialIndex).padStart(2, '0')}`;
                        serials.push(serialNumber);

                        labelsToPrint.push(`
                            <div class="label">
                                <h4>Orden: ${workOrderNumber}</h4>
                                <h4>Producto: ${productName}</h4>
                                <h4>Serial: ${serialNumber}</h4>
                                <svg class="barcode" data-barcode-value="${serialNumber}"></svg>
                            </div>
                        `);
                    }

                    receivedProducts.push({
                        IdProductoOrdenar: productId,
                        Recibida: recibida,
                        PorRecibir: newRestante,
                        Seriales: serials
                    });
                }
            });

            if (receivedProducts.length === 0) {
                alert("No se han ingresado productos válidos.");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/Ingresos/ActualizarPorRecibir",
                data: JSON.stringify(receivedProducts),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        alert("Ingreso registrado correctamente.");
                        if (labelsToPrint.length > 0) {
                            openPrintWindow(labelsToPrint.join(''), $("#orderNumber").val());
                        }
                    } else {
                        alert("Hubo un error al actualizar los datos.");
                    }
                },
                error: function () {
                    alert("Error al enviar la solicitud.");
                }
            });
        });
    });
</script>

